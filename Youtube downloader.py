from pytube import YouTube,Playlist
import customtkinter as ctk
from PIL import Image, ImageTk
from requests import get
from os import environ
import webbrowser
from threading import Thread
from CTkMessagebox import CTkMessagebox
from logo import path
#khi ta import file logo.py, m·∫∑c ƒë·ªãnh code trong file ƒë√≥ s·∫Ω l·∫≠p t·ª©c ƒë∆∞·ª£c ch·∫°y
#file logo ch·ª©a d·ªØ li·ªáu v·ªÅ ·∫£nh ytdownloaderlogo.ico, v√† file ·∫£nh s·∫Ω ƒë∆∞·ª£c t·∫°o, vi·∫øt d·ªØ li·ªáu ra
#file logo ·ªü %temp%
#path ch√≠nh l√† ƒë∆∞·ªùng d·∫´n t·ªõi logo, m·ª•c ƒë√≠ch import l√† ƒë·ªÉ d√πng cho l·ªánh iconbitmap ·ªü d∆∞·ªõi



class VideoBox(ctk.CTkFrame):
    # T·∫°o ra frame ch·ª©a c√°c th√¥ng tin l√† video, r·ªìi sau ƒë√≥ ƒë·∫∑t frame v√†o d√≤ng th·ª© 2 c·ªßa main window - v√πng ch·ª©a c√°c video

    def __init__(self,master,Video_url):
        super().__init__(master= master, fg_color="#181818", height = 120,bg_color="transparent")# kh·ªüi t·∫°o ra frame, c√πng c√°c ƒë·∫∑c t√≠nh nh∆∞ m√†u, chi·ªÅu cao...
        self.pack(expand = True, fill = "x",padx =3,pady = 2) # ƒë·∫∑t lu√¥n frame ƒë√≥ v√†o trong d√≤ng d√≤ng th·ª© 2 c·ªßa main window
        self.pack_propagate(False) # ch·ªëng cho frame t·ª± resize
        self.video = YouTube(Video_url) # d√πng class Youtube ƒë·ªÉ l·∫•y th√¥ng tin video
        self.thumbnail_url = self.video.thumbnail_url # l·∫•y url c·ªßa thumbnail
        self.title = self.video.title # l·∫•y title video
        self.image = Image.open(get(self.thumbnail_url,stream= True).raw).resize((160,90)) # d√πng h√†m get c·ªßa module request ƒë·ªÉ l·∫•y d·ªØ li·ªáu c·ªßa ·∫£nh thumbnail v·ªÅ, sau ƒë√≥ d√πng Image ƒë·ªÉ m·ªü ra
        self.tk_image = ImageTk.PhotoImage(self.image) # bi√©n ƒë·ªëi t∆∞·ª£ng ·∫£nh v·ª´a m·ªü th√†nh ImageTK
        self.image_button = ctk.CTkButton(self, text= "",image = self.tk_image,corner_radius=0,fg_color= "#222222",hover_color= "gray", command= lambda:webbrowser.open(Video_url)) #t·∫°o ra m·ªôt c√°i n√∫t, c√≥ ·∫£nh l√† thumbnail c·ªßa video, v√† khi ·∫•n v√†o s·∫Ω m·ªü lu√¥n video ƒë√≥ tr√™n tr√¨nh duy·ªát
        self.image_button.pack(side = "left",padx = 10) # ƒë·∫∑t c√°i n√∫t thumbnail xu·ªëng
        self.check = ctk.BooleanVar(value=True) # ·ªü tr√™n tool bar c·ªßa mainwindow, c√≥ c√°c n√∫t ƒë·ªÉ √°p d·ª•ng ch·ª©c nƒÉng 1 lo·∫°t, nh∆∞ download 1 lo·∫°t hay delete 1 lo·∫°t
                                                # vi·ªác th√™m 1 bi·∫øn check ·ªü ƒë√¢y, ƒë·ªÉ l∆∞u gi√° tr·ªã vi·ªác 1 video c√≥ ƒëang ƒë∆∞·ª£c ch·ªçn hay kh√¥ng, r·ªìi khi d√πng c√°c ch·ª©c nƒÉng c·ªßa tool bar s·∫Ω ki·ªÉm tra bi·∫øn n√†y
        self.streambox_value = [] # m·ªôt list ƒë·ªÉ l∆∞u text c·ªßa stream
        self.resolution = {} # ƒë·ªô ph√¢n gi·∫£i: c√°c stream
        # ƒë√¢y l√† m·ªôt t·ª´ ƒëi·ªÉn c√≥ d·∫°ng { <string> : class:stream } m·ª•c ƒë√≠ch l√† khi ng∆∞·ªùi d√πng ch·ªçn text t·ª´ danh s√°ch c√°c stream th√¨ s·∫Ω l·∫•y ra stream t∆∞∆°ng ·ª©ng v·ªõi text
        
        
        try: # th·ª≠ l·∫•y c√°c stream download c·ªßa video, n·∫øu kh√¥ng th·ªÉ l·∫•y stream, t·ª©c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Trong t√¨nh hu·ªëng ƒë√≥ s·∫Ω bi·∫øn title c·ªßa video th√†nh l·ªói ƒë·ªÉ hi·ªÉn th·ªã
            for stream in self.video.streams.filter(file_extension="mp4"): # v√¨ m·ªôt l√Ω do n√†o ƒë√≥, file √¢m thanh hay video th√¨ s·∫Ω ƒë·ªÅu c√≥ file extension l√† mp4, n√™n d√πng ƒë·ªÉ l·ªçc lu√¥n
                
                name = str(stream) # bi·∫øn stream th√†nh d·∫°ng text, v√† add text v√†o danh s√°ch c√°c l·ª±a ch·ªçn
                self.resolution[name] = stream # th√™m texta v√† stream v√†o dictionary
                self.streambox_value.append(name) # add v√†o list streambox ƒë·ªÉ ƒë∆∞a v√†o combo box
        except Exception as e:
            self.title = str(e)
        self.stream = None


        
        self.detail_frame_setup()

    def callback1(self,event): #h√†m c·ªßa combobox: khi ch·ªçn 1 stream s·∫Ω ƒë·∫∑t l·∫°i self.stream v√† set n√∫t download button t·ª´ disable v·ªÅ normal
        self.stream = self.resolution[event]
        self.dowloadbutton.configure(state = ctk.NORMAL)
    
    def detail_frame_setup(self):
        self.detail_frame = ctk.CTkFrame(self,fg_color="transparent")
        self.detail_frame.pack(side = "left",fill = "both",expand = True)
        #b√™n c·∫°nh h√¨nh thumbnail c·ªßa video, c√≥ 1 frame kh√°c ƒë·ªÉ ch·ª©a c√°c th√¥ng tin nh∆∞ title, combo box v√† n√∫t t·∫£i, xo√°
        
        ctk.CTkEntry(self.detail_frame,
                     textvariable=ctk.StringVar(value=self.title),
                     state= "readonly",
                     font=("Arial",20),
                     fg_color="transparent",
                     corner_radius= 0,
                     border_width=0).pack(fill = "x",pady = 10) # set title, d√πng entry v·ªõi state readonly ƒë·ªÉ c√≥ th·ªÉ vi·∫øt ra c√°c title d√†i
        self.checkbox = ctk.CTkCheckBox(self.detail_frame,text = "",hover_color= "gray",variable=self.check) # t·∫°o check box
        self.checkbox.pack(side = "left",padx = 7)
        
        
        self.stream_box = ctk.CTkComboBox(self.detail_frame,state="readonly",command=self.callback1) # t·∫°o combo box ƒë·ªÉ ch·ªçn stream
        self.stream_box.configure(values = self.streambox_value)
        self.stream_box.pack(side = "right",expand = True, fill = "x",padx = 10)
        self.dowloadbutton = ctk.CTkButton(self.detail_frame,
                                           text= "üì•",
                                           fg_color="#222222",
                                           hover_color="gray",
                                           font = ("Arial",16), 
                                           width= 20,state=ctk.DISABLED,
                                           command= lambda: Thread(target = lambda: self.stream.download()).start()) # th√™m n√∫t download
        self.deletebutton = ctk.CTkButton(self.detail_frame,text= "‚ùå",fg_color="#222222",hover_color="gray",font = ("Arial",16), width= 20,command= self.destroy) # th√™m n√∫t xo√° box
        self.dowloadbutton.pack(side = "right")
        self.deletebutton.pack(side = "right")

    def download(self):
        if self.check.get() == True: #ki·ªÉm tra xem bi·∫øn check c√≥ ƒëang l√† True kh√¥ng
            if self.stream != None: # n·∫øu c√≥ stream r·ªìi th√¨ download
                Thread(target= self.stream.download).start() 
            else: # n·∫øu ch∆∞a c√≥, th√¨ m·∫∑c ƒë·ªãnh l·∫•y ch·∫•t l∆∞·ª£ng cao nh·∫•t v√† t·∫£i
                Thread(target= self.video.streams.get_highest_resolution().download).start()
        
        # t·∫°o m·ªôt thread ri√™ng bi·ªát v√† kh·ªüi ƒë·ªông ƒë·ªÉ khi thread download video, ta v·∫´n c√≥ th·ªÉ thao t√°c c√°c vi·ªác kh√°c trong app

    def delete(self):
        if self.check.get() == True:
            self.destroy()

class YoutubeDownloader(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Youtube Downloader") # ƒë·∫∑t title
        self.geometry("900x450") # c√†i ƒë·∫∑t ƒë·ªô r·ªông c·ª≠a s·ªï
        self.iconbitmap(path) # ƒë·∫∑t logo logo
        self.minsize(900,450) # ƒë·∫∑t ƒë·ªô r·ªông c·ª≠a s·ªï min
        #c√†i ƒë·∫∑t s·ªë d√≤ng
        self.rowconfigure(0,weight=1,uniform="a") # d√≤ng 1 nh·ªè ·ªü tr√™n c√πng - thanh c√¥ng c·ª•
        self.rowconfigure(1,weight=5,uniform="a") # d√≤ng 2 l√† frame to ·ªü d∆∞·ªõi, n∆°i ch·ª©a c√°c videos

        # c√†i ƒë·∫∑t s·ªë c·ªôt - 1 c·ªôt duy nh·∫•t
        self.columnconfigure(0,weight=1,uniform="a")
    
    def toolframe(self):
        self.tool_frame = ctk.CTkFrame(self,fg_color="#222222",corner_radius=0) # t·∫°o ra m·ªôt frame, ƒë·∫∑t ·ªü d√≤ng ƒë·∫ßu ti√™n c·ªßa main window
        self.tool_frame.grid(row = 0,sticky = "news")                           # grid frame v·ª´a t·∫°o
        self.download_button = ctk.CTkButton(self.tool_frame,
                                             text= "üì•",
                                             fg_color="#222222",
                                             hover_color="gray",
                                             font = ("Arial",28), 
                                             width= 40,height=40,
                                             border_color="gray",
                                             border_width=2,
                                             corner_radius=0,
                                             command=self.download_func)        # t·∫°o n√∫t download
        self.download_button.pack(side = "left",padx = 15)                      # ƒë·∫∑t n√∫t download
        self.delete_button = ctk.CTkButton(self.tool_frame,
                                           text= "‚ùå",
                                           fg_color="#222222",
                                           hover_color="gray",
                                           font = ("Arial",28), 
                                           width= 40,
                                           height=40,
                                           border_color="gray",
                                           border_width=2,
                                           corner_radius=0,
                                           command=self.delete_func)            # t·∫°o n√∫t delete
        self.delete_button.pack(side = "left",padx = 15)                        # ƒë·∫∑t n√∫t delete
        self.add_button = ctk.CTkButton(self.tool_frame,
                                        text= "‚ûï",
                                        fg_color="#222222",
                                        hover_color="gray",
                                        font = ("Arial",28), 
                                        width= 40,height=40,
                                        border_color="gray",
                                        border_width=2,
                                        corner_radius=0
                                        ,command= AddURL)                       # t·∫°o n√∫t ƒë·ªÉ th√™m video
        self.add_button.pack(side = "left",padx = 15)                           # ƒë·∫∑t n√∫t th√™m video

        self.multilink = ctk.CTkButton(self.tool_frame,
                                       text= "üìÉ",
                                       fg_color="#222222",
                                       hover_color="gray",
                                       font = ("Arial",28), 
                                       width= 40,
                                       height=40,
                                       border_color="gray",
                                       border_width=2,
                                       corner_radius=0,
                                       command= MultiLink)                      # t·∫°o n√∫t th√™m nhi·ªÅu video m·ªôt l√∫c
        self.multilink.pack(side = "left",padx = 15)                            # ƒë·∫∑t n√∫t
    
    def delete_func(self):
        for box in self.list_frame.winfo_children():
            box.delete()
    
    def download_func(self):
        for box in self.list_frame.winfo_children():
            box.download()
    
    def listframe(self):
        self.list_frame = ctk.CTkScrollableFrame(self,fg_color="transparent")
        self.list_frame.grid(row = 1,sticky = "news")
        
    
    def addvideo(self,url):
        Thread(target= lambda: VideoBox(self.list_frame,url)).start()
    
    def run(self):
        # ch·∫°y l·∫ßn l∆∞·ª£t c√°c m·ª•c tool frame, list frame v√† sau ƒë√≥ b·∫≠t mainloop

        self.toolframe() # h√†m n√†y ch·ª©a code cho c√°c ƒë·ªëi t∆∞·ª£ng ·ªü tool bar
        self.listframe() # h√†m n√†y ch·ª©a code cho c√°c ƒë·ªëi t∆∞·ª£ng ·ªü list c√°c videos
        # thu·∫≠t to√°n ch√≠nh:
        # khi b·∫•m n√∫t addvideo v√† ƒë∆∞a url v√†o, h√†m addvideo() s·∫Ω ƒë∆∞·ª£c ch·∫°y, v·ªõi tham s·ªë l√† url
        # sau ƒë√≥ th√¨ tham s·ªë url s·∫Ω ƒë∆∞·ª£c ƒë∆∞a v√†o class VideoBox
        
        
        self.mainloop()

class AddURL(ctk.CTkToplevel): # t·∫°o m·ªôt c·ª≠a s·ªï ƒë·ªÉ nh·∫≠p v√† th√™m video
    def __init__(self):
        super().__init__()
        # self.attributes("-toolwindow",True)
        self.iconbitmap(path)
        self.after(200,lambda: self.iconbitmap(path))
        self.geometry("300x100")
        self.attributes("-topmost",True)
        self.title("Add video")
        self.minsize(300,100)
        ctk.CTkLabel(self,text="Enter video link or playlist link").pack()
        self.entry = ctk.CTkEntry(self)
        self.entry.pack(fill = "x",padx = 10, expand = True)
        button = ctk.CTkButton(self,text="add",fg_color="#222222",hover_color="gray",command=self.add,border_width=2)
        button.pack(expand = True)
    def add(self):
        url = self.entry.get()
        try: # d√πng c·∫•u tr√∫c n√†y ƒë·ªÉ th·ª≠ xem c√≥ ph·∫£i url c·ªßa video youtube kh√¥ng
            YouTube(url) # d√≤ng n√†y s·∫Ω raise error n·∫øu url kh√¥ng h·ª£p l·ªá
            app.addvideo(url)
            self.destroy()
            return
        except: # n·∫øu kh√¥ng ph·∫£i th√¨ th·ª≠ ti·∫øp qua playlist
            pass  
        try:
            playlist =  Playlist(url) # d√≤ng n√†y s·∫Ω raise error n·∫øu url kh√¥ng h·ª£p l·ªá
            for video in playlist.videos:
                app.addvideo(video.watch_url)
            self.destroy()         
        except: # v·∫´n kh√¥ng ph·∫£i, th√¨ s·∫Ω ƒë∆∞a ra msg box b√°o l·ªói
            CTkMessagebox(title="Error",icon="cancel",message="Invalid URL")
            self.destroy()
            return       

class MultiLink(ctk.CTkToplevel):
    def __init__(self):
        super().__init__()
        self.iconbitmap(path)
        self.after(200,lambda: self.iconbitmap(path))
        # self.attributes("-toolwindow",True)
        self.geometry("600x400")
        self.attributes("-topmost",True)
        self.title("Add video")
        self.minsize(600,400)
        self.text = ctk.CTkTextbox(self)
        self.text.pack(expand = True,fill = "both")
        button = ctk.CTkButton(self,text="add",fg_color="#222222",hover_color="gray",command=self.add,border_width=2)
        button.pack()
    
    def add(self):
        url = self.text.get("1.0",ctk.END)
        url = url.split("\n")
        for i in url:
            try:
                YouTube(i)
                app.addvideo(i)
            except:
                pass
        self.destroy()       

if __name__ == "__main__":
    ctk.set_appearance_mode("dark")
    app = YoutubeDownloader()
    app.run()